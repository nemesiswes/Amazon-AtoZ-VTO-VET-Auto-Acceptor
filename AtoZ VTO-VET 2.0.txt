// ==UserScript==
// @name        Amazon VTO/VET Checker 2.0
// @namespace
// @description Checks for VTO
// @include     https://atoz.amazon.work/*
// @include     https://idp.amazon.work/*
// @include     https://idp.federate.amazon.com/*
// @include     https://*
// @include     http://*
// @version     1
// @grant       GM_addStyle
// @grant       GM_log
// @grant       GM_xmlhttpRequest
// @grant       GM_setValue
// @grant       GM_getValue
// @grant       GM_deleteValue
// @require     http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js
// ==/UserScript==


//Master Switch, is set by checking the home server wether it should run every so often
var checking_allowed = GM_getValue("checking_allowed", "true");

//Used to determine when to check home server
var last_check_time = parseFloat(GM_getValue("last_check_time", 0));
var check_interval = 30000; //Time is in milliseconds

var sound_on = true;


Get_VTO();

async function Get_VTO()
{
    //First check if checking is allowed if enough time has passed since last check
    if((new Date().getTime()) >= (last_check_time + check_interval))
    {
        GM_setValue("last_check_time", new Date().getTime());

        jQuery.ajax({
            type: 'GET',
            url: 'http://192.168.0.112/atoz/?username=wes&password=W@1234',
            dataType: 'text',
            success: function( data ) {
                if(data == "true")
                {
                    //alert("true returned");
                    checking_allowed = true;
                    GM_setValue("checking_allowed", "true");
                }
                else
                {
                    //alert("false returned");
                    checking_allowed = false;
                    GM_setValue("checking_allowed", "false");
                }
            }
        });
    }

    //alert("Checking = " + checking_allowed);

    var found = false;

    if(checking_allowed == "true")
    {
        //alert("CHECKING IS ALLOWED");
        // LOGIN URL = https://idp.amazon.work/idp/profile/SAML2/Unsolicited/SSO?providerId=idp.federate.amazon.com
        //Loging submit button =  <button type="submit" class="btn btn-primary full-width" name="SubmitButton"> Log in </button>
        //First check whate url we are on
        if(window.location.href.indexOf("https://idp.amazon.work/idp/") > -1)
        {
            //Click the button to login, chrome auto fills the form
            await new Promise(r => setTimeout(r, 1000));

            //First make sure element exists
            var password_field = document.getElementById("password");
            var username_field = document.getElementById("login");
            var submit_button = document.getElementsByName("SubmitButton");

            if(typeof(password_field) != 'undefined' && password_field != null &&
               typeof(username_field) != 'undefined' && username_field != null &&
               typeof(submit_button) != 'undefined' && submit_button != null && submit_button.length > 0)
            {
                //First click password field then submit
                simulate(password_field, "mouseover", { pointerX: 0, pointerY: 0 });
                simulate(password_field, "mousedown", { pointerX: 0, pointerY: 0 });
                simulate(password_field, "mouseup", { pointerX: 0, pointerY: 0 });
                simulate(password_field, "click", { pointerX: 0, pointerY: 0 });

                //await new Promise(r => setTimeout(r, 500));

                simulate(username_field, "mouseover", { pointerX: 0, pointerY: 0 });
                simulate(username_field, "mousedown", { pointerX: 0, pointerY: 0 });
                simulate(username_field, "mouseup", { pointerX: 0, pointerY: 0 });
                simulate(username_field, "click", { pointerX: 0, pointerY: 0 });

                //await new Promise(r => setTimeout(r, 500));

                simulate(submit_button[0], "mouseover");
                simulate(submit_button[0], "mousedown");
                simulate(submit_button[0], "mouseup");
                simulate(submit_button[0], "click");


                //document.getElementsByName("SubmitButton")[0].click();
            }
        }
        else if(window.location.href.indexOf("https://atoz.amazon.work/time/optional") == -1)
        {
            //Need to redirect to https://atoz.amazon.work/
            await new Promise(r => setTimeout(r, 500));
            reload("https://atoz.amazon.work/time/optional");
            //window.location.href = "https://atoz.amazon.work/time/optional";
        }
        else if(window.location.href.indexOf("https://atoz.amazon.work/time/optional/amzn.ls.opportunityid") > -1)
        {
            found = true;
            //alert("on the accept vto page");

            if(sound_on)
            {
                //alert("Playing sound");
                var alarm_sound = new Audio("https://dl.dropbox.com/s/kh8idcpcr56vn19/Danger%20Alarm%20Sound%20Effect.mp3");
                alarm_sound.loop = true;
                alarm_sound.play();
            }

            accept_vto();
        }
        else if(window.location.href.indexOf("https://atoz.amazon.work/time/optional") > -1)
        {
            await new Promise(r => setTimeout(r, 500));

            jQuery.ajax({
                type: 'GET',
                url: 'https://atoz.amazon.work/api/v1/opportunities/get_opportunities?employee_id=108895211',
                dataType: 'json',
                success: function( data ) {
                    //alert(Object.keys(data.vtoOpportunities).length.toString());
                    var vet = Object.keys(data.vetOpportunities).length;
                    var vto = Object.keys(data.vtoOpportunities).length;

                    //Check if any vto is not full or already accepted
                    var sound_the_alarm = false;

                    //Get the oppertunity id
                    var op_id = "";

                    for(var i = 0; i < vto; i++)
                    {
                        if(data.vtoOpportunities[i].active)
                        {
                            //Check that the signup_start_time is <= current time
                            //alert(new Date(data.vtoOpportunities[i].signup_start_time).getTime() + " and " + new Date().getTime());
                            if(new Date(data.vtoOpportunities[i].signup_start_time).getTime() <= new Date().getTime())
                            {
                                sound_the_alarm = true;
                                op_id = data.vtoOpportunities[i].opportunity_id;
                            }
                        }
                    }



                    //if greater then 0, play song
                    if(sound_the_alarm)
                    {
                        if(sound_on)
                        {
                            //alert("Playing sound");
                            var alarm_sound = new Audio("https://dl.dropbox.com/s/kh8idcpcr56vn19/Danger%20Alarm%20Sound%20Effect.mp3");
                            alarm_sound.loop = true;
                            alarm_sound.play();
                        }

                        found = true;

                        //Go to accept vto page
                        reload("https://atoz.amazon.work/time/optional/" + op_id);

                        //accept_vto();
                    }
                }
            });
        }
    }
    else
    {
        //alert("CHECKING IS NOT ALLOWED");
    }

    await new Promise(r => setTimeout(r, 3000));


    if(found)
    {
        await new Promise(r => setTimeout(r, 2000));
        reload("https://atoz.amazon.work/time/optional");
    }
    else
    {
        reload("https://atoz.amazon.work/time/optional");
    }
}


async function accept_vto()
{
    /*

    //Wait to make sure autoclicker interacts with dom first
    await new Promise(r => setTimeout(r, 2000));

    //Now open vto oppertunity
    var items = document.getElementsByClassName("list-group-item ");

    //alert("Items count = "+items.length);

    //NOTE:
    //Get the first item, since almost always will be the one we want, if not, will fix later
    //click the item, its an a tag link to the vto oppertunity id
    var vto_list_item = items[0]

    //Wait to make sure autoclicker interacts with dom first
    await new Promise(r => setTimeout(r, 1000));

    //Simulate click to open vto oppertunity
    simulate(vto_list_item, "mouseover");
    simulate(vto_list_item, "mousedown");
    simulate(vto_list_item, "mouseup");
    simulate(vto_list_item, "click");

    //Wait to make sure autoclicker interacts with dom first
    await new Promise(r => setTimeout(r, 1000));

    //alert("Opened vto oppertunity");

    */

    //
    //
    // CODE ABOVE WAS BEFORE WE WENT TO THE ACCEPT VTO PAGE BY JUST APPENDING THE OP_ID, IT WOULD FIRST CLICK THE OP_ID TO GO TO THAT PAGE
    //
    //

    //Wait to make sure autoclicker interacts with dom first
    await new Promise(r => setTimeout(r, 1000));

    //Now accepting VTO
    //Looking for class btn btn-primary btn-half-block
    var button_class = document.getElementsByClassName("btn btn-primary btn-half-block");

    //alert("Number of buttons found with correct classes = " + button_class.length);

    if(typeof(button_class) != 'undefined' && button_class != null && button_class.length >0)
    {
        //loop through buttons and verify the text says Accept
        var accept_btn_id = 0;
        for(var i = 0; i < button_class.length; i++)
        {
            //DATA TEXT = Accept NEW_VTO - Click

            if(button_class[i].hasAttribute("data-omniture-link"))
            {
                if(button_class[i].getAttribute("data-omniture-link") == "Accept NEW_VTO - Click")
                {
                    //alert("FOUND THE ACCEPT BUTTON");
                    accept_btn_id = i;
                }

                //get the data inside attribute
                //alert("Attribute data = " + button_class[i].getAttribute("data-omniture-link"));
            }
        }

        //alert("Accepting VTO");

        //Now accept
        var accept_button = button_class[accept_btn_id];

        if(typeof(accept_button) != 'undefined' && accept_button != null)
        {
            //Simulate click to accept vto oppertunity
            simulate(accept_button, "mouseover");
            simulate(accept_button, "mousedown");
            simulate(accept_button, "mouseup");
            simulate(accept_button, "click");

            //Wait to make sure autoclicker interacts with dom first
            await new Promise(r => setTimeout(r, 500));


            //Now confirm accept
            //Class btn btn-primary btn-half-block
            var accept_again_button_class = document.getElementsByClassName("btn btn-primary btn-half-block");

            //alert("Number of buttons found with correct classes = " + accept_again_button_class.length);

            if(typeof(accept_again_button_class) != 'undefined' && accept_again_button_class != null && accept_again_button_class.length > 0)
            {
                //loop through buttons and verify the text says Accept
                var accept_btn_id_2 = 0;
                for(var a = 0; a < accept_again_button_class.length; a++)
                {
                    //DATA TEXT = Confirm accepting NEW_VTO - Click
                    //alert(a + " and value = " + accept_again_button_class[a].getAttribute("data-omniture-link"));

                    if(accept_again_button_class[a].hasAttribute("data-omniture-link"))
                    {
                        if(accept_again_button_class[a].getAttribute("data-omniture-link") == "Confirm accepting NEW_VTO - Click")
                        {
                            //alert("FOUND THE ACCEPT BUTTON");
                            accept_btn_id_2 = a;
                        }

                        //get the data inside attribute
                        //alert("Attribute data = " + accept_again_button_class[a].getAttribute("data-omniture-link"));
                    }
                }


                //Now accept
                var accept_button_again = accept_again_button_class[accept_btn_id_2];
                if(typeof(accept_button_again) != 'undefined' && accept_button_again != null)
                {
                    //Simulate click to accept vto oppertunity
                    simulate(accept_button_again, "mouseover");
                    simulate(accept_button_again, "mousedown");
                    simulate(accept_button_again, "mouseup");
                    simulate(accept_button_again, "click");

                    //alert("button clicked");
                }
            }
        }
    }
}


function reload(url)
{
    //location.reload()
    window.location.href = url;
}

//ALL CODE BELOW Taken From StackOverflow, NOT MY OWN CODE.
function simulate(element, eventName)
{
    var options = extend(defaultOptions, arguments[2] || {});
    var oEvent, eventType = null;

    for (var name in eventMatchers)
    {
        if (eventMatchers[name].test(eventName)) { eventType = name; break; }
    }

    if (!eventType)
        throw new SyntaxError('Only HTMLEvents and MouseEvents interfaces are supported');

    if (document.createEvent)
    {
        oEvent = document.createEvent(eventType);
        if (eventType == 'HTMLEvents')
        {
            oEvent.initEvent(eventName, options.bubbles, options.cancelable);
        }
        else
        {
            oEvent.initMouseEvent(eventName, options.bubbles, options.cancelable, document.defaultView,
            options.button, options.pointerX, options.pointerY, options.pointerX, options.pointerY,
            options.ctrlKey, options.altKey, options.shiftKey, options.metaKey, options.button, element);
        }
        element.dispatchEvent(oEvent);
    }
    else
    {
        options.clientX = options.pointerX;
        options.clientY = options.pointerY;
        var evt = document.createEventObject();
        oEvent = extend(evt, options);
        element.fireEvent('on' + eventName, oEvent);
    }
    return element;
}

function extend(destination, source) {
    for (var property in source)
      destination[property] = source[property];
    return destination;
}

var eventMatchers = {
    'HTMLEvents': /^(?:load|unload|abort|error|select|change|submit|reset|focus|blur|resize|scroll)$/,
    'MouseEvents': /^(?:click|dblclick|mouse(?:down|up|over|move|out))$/
}
var defaultOptions = {
    pointerX: 0,
    pointerY: 0,
    button: 0,
    ctrlKey: false,
    altKey: false,
    shiftKey: false,
    metaKey: false,
    bubbles: true,
    cancelable: true
}
